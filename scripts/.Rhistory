fql <- r$fql
syntax <- r$syntax
description <- r$description
unit <- r$unit
report_freq <- r$report_freq
category <- r$category
note <- r$note
ret <- trySelect(conn, "category", c("category_id"), paste("category_name", enQuote(category), sep="="))
category_id <- ret$category_id
browser()
tryInsert(conn, "fql", c("fql","syntax","description","unit","report_freq","note","category_id"),
data.frame(c(enQuote(fql)),
c(enQuote2(syntax)),
c(enQuote(description)),
c(unit),
c(enQuote(report_freq)),
c(enQuote(category)),
c(enQuote(note))
)
)
}
# Download specified FS parameters
tryCatch({
library(tools)
library(FactSetOnDemand)
library(xts)
library(RSQLite)
source("read_config.r")
source("logger.r")
source("tryDb.r")
source("assert.r")
source("tryExtract.r")
}, warning=function(msg){
print(msg)
stop()
}, error=function(msg){
print(msg)
stop()
}
)
MAX_TRIALS <- 5
db <- "D:/home/honda/sqlite-db/mini.sqlite"
config_file <- "/home/honda/mpg/dummy/createdb.conf"
config <- read_config(config_file) # returns an environment
wkdir <- get("WORKING_DIR", envir=config)
timestamp <- format(Sys.time(), "%Y-%m-%d_%H-%M-%S")
logfile <- file.path(wkdir, paste("dummy", ".log",sep=""))
logger.init(level=logger.INFO,
do_stdout=TRUE,
logfile=logfile)
print(paste("Log file:", logfile))
conn <<- dbConnect( SQLite(), db )
logger.info(paste("Opened SQLite database:", db))
# on.exit( function(conn) {
#
#     dbDisconnect(conn)
#     logger.info("Closed db")
#     logger.info("Good bye!")
#     logger.close()
# })
########################################
# Configure FS
########################################
# Query time out.  Default is 120 secs.  120-3600 secs on client side.
FactSet.setConfigurationItem( FactSet.TIMEOUT, 900 )
logger.info(paste("FactSet timetout:", 900, "secs"))
########################################
# Load config
########################################
config <- read_config(config_file) # returns an environment
logger.info(paste("Loaded config:", config_file))
wkdir <- ""
portfolio_ofdb <- ""
universe <- c("character")
prefix <- ""
t0 <- ""
t1 <- ""
default_currency <- ""
stopifnot( exists("WORKING_DIR", envir=config) )
wkdir <- get("WORKING_DIR", mode="character", envir=config)
if( !file.exists(wkdir) ){
logger.warn(paste("Directory does not exist.  Creating...:", wkdir))
dir.create(wkdir)
}
stopifnot( file.exists(wkdir) )
stopifnot( exists("OUTPUT_PREFIX", envir=config) )
prefix <- get("OUTPUT_PREFIX", mode="character", envir=config) # "dummy"
if(is.null(prefix)){
prefix = "" # to make string concatinations happy
}
stopifnot( exists("T0", envir=config) )
t0 <- get("T0", mode="character", envir=config) # "1980-01-01" NOTE: implement "last"?
stopifnot(grepl("[[:digit:]]+{4}-[[:digit:]]+{2}-[[:digit:]]+{2}", t0))
fs.t0 <- gsub("-", "", t0)
stopifnot( exists("T1", envir=config) )
t1 <- get("T1", mode="character", envir=config) # "1980-12-12" "now"
stopifnot(grepl("[[:digit:]]+{4}-[[:digit:]]+{2}-[[:digit:]]+{2}", t1))
fs.t1 <- gsub("-", "", t1)
stopifnot( exists("DEFAULT_CURRENCY", envir=config) )
default_currency <- get("DEFAULT_CURRENCY", mode="character", envir=config) # USD
stopifnot( toupper(default_currency) %in% c("USD","LOCAL") )
stopifnot( exists("MARKET", envir=config) )
market <- get("MARKET", mode="character", envir=config)
stopifnot( toupper(market) %in% c("MIXED", "EM", "DM", "FM") )
stopifnot( exists("INDEX", envir=config) )
finance.index <- get("INDEX", mode="character", envir=config)
if( exists("PORTFOLIO_OFDB", envir=config) ){
portfolio_ofdb <- get("PORTFOLIO_OFDB", mode="character", envir=config) # "PERSONAL:HONDA_MSCI_ACWI_ETF"
stopifnot( !is.null(portfolio_ofdb) && portfolio_ofdb != "" )
data <- FF.ExtractOFDBUniverse(portfolio_ofdb, "0O")
logger.info(paste("Loaded universe from", portfolio_ofdb))
universe <- data$Id
} else if( exists("UNIVERSE", envir=config) ){
universe_file <- get("UNIVERSE", mode="character", envir=config) # "list_of_constituents.txt"
stopifnot( !is.null(universe_file) && universe_file != "" )
stopifnot( file.exists(universe_file))
unicon <- file(universe_file, open="r", blocking=FALSE)
temp <- read.table(unicon, colClasses=c("character"), header=TRUE, strip.white=TRUE, blank.lines.skip=TRUE, comment.char="#")
universe <-temp[[1]]
close(unicon)
logger.info(paste("Loaded universe from file:", universe_file))
} else{
#error
stop(paste("Either", "PORTFOLIO_OFDB", "or", "UNIVERSE", "must be specified"))
}
if( length(universe) == 0){
logger.warn("Empty universe.  Nothing to do.  Exiting normally...")
return(0)
}
logger.info(paste("UNIVERSE(", length(universe), "): ", paste(universe, collapse=",")))
logger.info(paste("WORKING_DIR:", wkdir))
logger.info(paste("OUTPUT_PREFIX:", prefix))
logger.info(paste("T0,T1:", t0,",",t1))
logger.info(paste("DEFAULT_CURRENCY:", default_currency))
logger.info(paste("MARKET:", market))
logger.info(paste("INDEX:", finance.index))
########################################
# Extract FactSet parameter strings
# Prefixed with "FACTSET_"
########################################
stopifnot( exists("FACTSET_PREFIX", envir=config) )
fs_prefix <- get("FACTSET_PREFIX", envir=config)
logger.info(paste("FACTSET_PREFIX:", fs_prefix))
fs_prefix_pattern <- paste("^", fs_prefix, sep="")
config_param_list <- grep(fs_prefix_pattern, ls(config), value=TRUE)
param_list <- gsub(fs_prefix_pattern, "", config_param_list)
logger.info(paste("FACTSET items:", paste(param_list, collapse=",")))
########################################
# Create Country Table
########################################
#q_str <- "CREATE TABLE IF NOT EXiSTS country (country_id INTEGER PRIMARY KEY ASC AUTOINCREMENT NOT NULL UNIQUE, country TEXT(100), region TEST(50), exchange TEXT(50), curr_iso VARCHAR(3), curr TEXT(100), market VARCHAR(25))"
#stopifnot(trySendQuery(conn, q_str))
specs <- c("country_id INTEGER PRIMARY KEY ASC AUTOINCREMENT NOT NULL UNIQUE",
"country TEXT(100)",
"region TEST(50)",
"exchange TEXT(50)",
"curr_iso VARCHAR(3)",
"curr TEXT(100)",
"market VARCHAR(25)" )
tryCreateTable(conn, "country", specs)
logger.info("Created COUNTRY table")
########################################
# Create COMPANY table
########################################
#q_str <- "CREATE TABLE IF NOT EXISTS company (factset_id VARCHAR(20) PRIMARY KEY NOT NULL UNIQUE, company_name TEXT(100), country_id INTEGER, sector_id,indgrp_id,industry_id,subind_id,FOREIGN KEY(country_id) REFERENCES country(country_id) ON DELETE NO ACTION ON UPDATE CASCADE,FOREIGN KEY(sector_id) REFERENCES sector(sector_id) ON DELETE NO ACTION ON UPDATE CASCADE,FOREIGN KEY(indgrp_id) REFERENCES indgrp(indgrp_id) ON DELETE NO ACTION ON UPDATE CASCADE,FOREIGN KEY(industry_id) REFERENCES industry(industry_id) ON DELETE NO ACTION ON UPDATE CASCADE,FOREIGN KEY(subind_id) REFERENCES subind(subind_id) ON DELETE NO ACTION ON UPDATE CASCADE)"
#stopifnot(trySendQuery(conn, q_str))
specs <- c("factset_id VARCHAR(20) PRIMARY KEY NOT NULL UNIQUE",
"company_name TEXT(100)",
"country_id INTEGER",
"sector_id",
"indgrp_id",
"industry_id",
"subind_id",
"FOREIGN KEY(country_id) REFERENCES country(country_id) ON DELETE NO ACTION ON UPDATE CASCADE",
"FOREIGN KEY(sector_id) REFERENCES sector(sector_id) ON DELETE NO ACTION ON UPDATE CASCADE",
"FOREIGN KEY(indgrp_id) REFERENCES indgrp(indgrp_id) ON DELETE NO ACTION ON UPDATE CASCADE",
"FOREIGN KEY(industry_id) REFERENCES industry(industry_id) ON DELETE NO ACTION ON UPDATE CASCADE",
"FOREIGN KEY(subind_id) REFERENCES subind(subind_id) ON DELETE NO ACTION ON UPDATE CASCADE"
)
tryCreateTable(conn, "company", specs)
logger.info("Created COMPANY table")
########################################
# Create (industrial) SECTOR table
########################################
#q_str <- "CREATE TABLE IF NOT EXISTS sector (sector_id INTEGER PRIMARY KEY NOT NULL UNIQUE, sector_name TEXT(100) NOT NULL UNIQUE)"
#stopifnot(trySendQuery(conn, q_str))
specs <- c("sector_id INTEGER PRIMARY KEY NOT NULL UNIQUE",
"sector_name TEXT(100) NOT NULL UNIQUE"
)
tryCreateTable(conn, "sector", specs)
logger.info("Created SECTOR table")
########################################
# Create INDGRP table
########################################
#q_str <- "CREATE TABLE IF NOT EXISTS indgrp (indgrp_id INTEGER PRIMARY KEY ASC AUTOINCREMENT NOT NULL UNIQUE, indgrp_name TEXT(100) NOT NULL UNIQUE)"
#stopifnot(trySendQuery(conn, q_str))
specs <- c("indgrp_id INTEGER PRIMARY KEY ASC AUTOINCREMENT NOT NULL UNIQUE",
"indgrp_name TEXT(100) NOT NULL UNIQUE"
)
tryCreateTable(conn, "indgrp", specs)
logger.info("Created INDGRP table")
########################################
# Create INDUSTRY table
########################################
#q_str <- "CREATE TABLE IF NOT EXISTS industry (industry_id INTEGER PRIMARY KEY ASC AUTOINCREMENT NOT NULL UNIQUE, industry_name TEXT(100) NOT NULL UNIQUE)"
#stopifnot(trySendQuery(conn, q_str))
specs <- c("industry_id INTEGER PRIMARY KEY ASC AUTOINCREMENT NOT NULL UNIQUE",
"industry_name TEXT(100) NOT NULL UNIQUE"
)
tryCreateTable(conn, "industry", specs)
logger.info("Created INDUSTRY table")
########################################
# Create SUBIND table
########################################
#q_str <- "CREATE TABLE IF NOT EXISTS subind (subind_id INTEGER PRIMARY KEY ASC AUTOINCREMENT NOT NULL UNIQUE, subind_name TEXT(100) NOT NULL UNIQUE)"
#stopifnot(trySendQuery(conn, q_str))
specs <- c("subind_id INTEGER PRIMARY KEY ASC AUTOINCREMENT NOT NULL UNIQUE",
"subind_name TEXT(100) NOT NULL UNIQUE"
)
tryCreateTable(conn, "subind", specs)
logger.info("Created SUBIND table")
########################################
# Create CATEGORY table
########################################
#q_str <- "CREATE TABLE IF NOT EXISTS category (category_id INTEGER PRIMARY KEY ASC AUTOINCREMENT NOT NULL UNIQUE, category_name TEXT(50) NOT NULL UNIQUE)"
#trySendQuery(conn, q_str)
specs <- c("category_id INTEGER PRIMARY KEY ASC AUTOINCREMENT NOT NULL UNIQUE",
"category_name TEXT(50) NOT NULL UNIQUE"
)
tryCreateTable(conn, "category", specs)
logger.info("Created CATEGORY table")
#q_str <- "INSERT OR REPLACE INTO category (category_name) VALUES ('company fundamental'), ('price'), ('company meta'), ('country fundamental')"
#stopifnot(trySendQuery(conn, q_str))
tryInsert(conn, "category", c("category_name"), data.frame(enQuote(c("company fundamental","price","company meta","country fundamental"))))
logger.info("Populated CATEGORY table")
########################################
# Create FREQUENCY table
########################################
#q_str <- "CREATE TABLE IF NOT EXISTS frequency (freq VARCHAR(1) PRIMARY KEY NOT NULL UNIQUE, freq_name VARCHAR(20) UNIQUE)"
#trySendQuery(conn, q_str)
specs <- c("freq VARCHAR(1) PRIMARY KEY NOT NULL UNIQUE",
"freq_name VARCHAR(20) UNIQUE"
)
tryCreateTable(conn, "frequency", specs)
logger.info("Created FREQUENCY table")
#q_str <- "INSERT OR REPLACE INTO frequency (freq, freq_name) VALUES ('Y','Anuual'),('S','Semiannual'),('Q','Quarterly'),('M','Monthly'),('D','Daily')"
#stopifnot(trySendQuery(conn, q_str))
tryInsert(conn, "frequency", c("freq", "freq_name"),
data.frame(enQuote(c("Y","S","Q","M","D")),enQuote(c("Anuual","Semiannual","Quarterly","Monthly","Daily"))) )
logger.info("Populated FREQUENCY table")
########################################
# Create FQL table
########################################
#q_str <- "CREATE TABLE IF NOT EXISTS fql (fql VARCHAR(20) PRIMARY KEY NOT NULL UNIQUE, description TEXT(100), unit FLOAT, freq CHAR(1), note TEXT(200), category_id INTEGER, FOREIGN KEY(category_id) REFERENCES category(category_id) ON DELETE NO ACTION ON UPDATE CASCADE, FOREIGN KEY(freq) REFERENCES frequency(freq) ON DELETE NO ACTION ON UPDATE CASCADE )"
#stopifnot(!trySendQuery(conn, q_str))
specs <- c("fql VARCHAR(20) PRIMARY KEY NOT NULL UNIQUE",
"syntax TEXT(200)",
"description TEXT(100)",
"unit FLOAT",
"report_freq CHAR(1)",
"note TEXT(200)",
"category_id INTEGER",
"FOREIGN KEY(category_id) REFERENCES category(category_id) ON DELETE NO ACTION ON UPDATE CASCADE",
"FOREIGN KEY(freq) REFERENCES frequency(freq) ON DELETE NO ACTION ON UPDATE CASCADE"
)
tryCreateTable(conn, "fql", specs)
logger.info("Created FQL table")
########################################
# FQL map
########################################
stopifnot( exists("FQL_MAP", envir=config) )
fql_map_filename <- get("FQL_MAP", envir=config)
stopifnot(file.exists(fql_map_filename))
fql_map <- read.csv(fql_map_filename)
rownames(fql_map) <- fql_map$item
for( i in seq(1, nrow(fql_map) )){
r <- fql_map[i,]
fql <- r$fql
syntax <- r$syntax
description <- r$description
unit <- r$unit
report_freq <- r$report_freq
category <- r$category
note <- r$note
ret <- trySelect(conn, "category", c("category_id"), paste("category_name", enQuote(category), sep="="))
category_id <- ret$category_id
browser()
tryInsert(conn, "fql", c("fql","syntax","description","unit","report_freq","note","category_id"),
data.frame(c(enQuote(fql)),
c(enQuote2(syntax)),
c(enQuote(description)),
c(unit),
c(enQuote(report_freq)),
c(enQuote(category)),
c(enQuote(note))
)
)
}
stopifnot( exists("FQL_MAP", envir=config) )
fql_map_filename <- get("FQL_MAP", envir=config)
stopifnot(file.exists(fql_map_filename))
fql_map <- read.csv(fql_map_filename)
rownames(fql_map) <- fql_map$item
for( i in seq(1, nrow(fql_map) )){
r <- fql_map[i,]
fql <- r$fql
syntax <- r$syntax
description <- r$description
unit <- r$unit
report_freq <- r$report_freq
category <- r$category
note <- r$note
ret <- trySelect(conn, "category", c("category_id"), paste("category_name", enQuote(category), sep="="))
category_id <- ret$category_id
browser()
tryInsert(conn, "fql", c("fql","syntax","description","unit","report_freq","note","category_id"),
data.frame(c(enQuote(fql)),
c(enQuote2(syntax)),
c(enQuote(description)),
c(unit),
c(enQuote(report_freq)),
c(enQuote(category)),
c(enQuote(note))
)
)
}
dbSendQuery(conn, "INSERT INTO 'fql' ('fql','syntax','description','unit','report_freq','note','category_id') VALUES ('FF_ASSETS',\"FF.ExtractFormulaHistory('<ID>', 'FF_ASSETS', '<d1>:<d2>:<freq>','curr=<curr>')\",'total assets',4,'annual','company fundamental','')")
dbSendQuery(conn, "INSERT INTO 'fql ('fql','syntax','description','unit','report_freq','note','category_id') VALUES ('FF_ASSETS',\"FF.ExtractFormulaHistory('<ID>', 'FF_ASSETS', '<d1>:<d2>:<freq>','curr=<curr>')\",'total assets',4,'annual','company fundamental','')")
dbSendQuery(conn, "INSERT INTO fql ('fql','syntax','description','unit','report_freq','note','category_id') VALUES ('FF_ASSETS',\"FF.ExtractFormulaHistory('<ID>', 'FF_ASSETS', '<d1>:<d2>:<freq>','curr=<curr>')\",'total assets',4,'annual','company fundamental','')")
dbSendQuery(conn, "INSERT INTO fql ('fql') VALUES('FF_ASSERT')")
specs <- c("fql VARCHAR(20) PRIMARY KEY NOT NULL UNIQUE",
"syntax TEXT(200)",
"description TEXT(100)",
"unit FLOAT",
"report_freq CHAR(1)",
"note TEXT(200)",
"category_id INTEGER",
"FOREIGN KEY(category_id) REFERENCES category(category_id) ON DELETE NO ACTION ON UPDATE CASCADE",
"FOREIGN KEY(freq) REFERENCES frequency(freq) ON DELETE NO ACTION ON UPDATE CASCADE"
)
tryCreateTable(conn, "fql", specs)
specs <- c("fql VARCHAR(20) PRIMARY KEY NOT NULL UNIQUE",
"syntax TEXT(200)",
"description TEXT(100)",
"unit FLOAT",
"report_freq CHAR(1)",
"note TEXT(200)",
"category_id INTEGER",
"FOREIGN KEY(category_id) REFERENCES category(category_id) ON DELETE NO ACTION ON UPDATE CASCADE",
"FOREIGN KEY(report_freq) REFERENCES frequency(freq) ON DELETE NO ACTION ON UPDATE CASCADE"
)
tryCreateTable(conn, "fql", specs)
logger.info("Created FQL table")
stopifnot( exists("FQL_MAP", envir=config) )
fql_map_filename <- get("FQL_MAP", envir=config)
stopifnot(file.exists(fql_map_filename))
fql_map <- read.csv(fql_map_filename)
rownames(fql_map) <- fql_map$item
for( i in seq(1, nrow(fql_map) )){
r <- fql_map[i,]
fql <- r$fql
syntax <- r$syntax
description <- r$description
unit <- r$unit
report_freq <- r$report_freq
category <- r$category
note <- r$note
ret <- trySelect(conn, "category", c("category_id"), paste("category_name", enQuote(category), sep="="))
category_id <- ret$category_id
browser()
tryInsert(conn, "fql", c("fql","syntax","description","unit","report_freq","note","category_id"),
data.frame(c(enQuote(fql)),
c(enQuote2(syntax)),
c(enQuote(description)),
c(unit),
c(enQuote(report_freq)),
c(enQuote(category)),
c(enQuote(note))
)
)
}
source('D:/home/honda/mpg/scripts/createdb.r', echo=TRUE)
c
source('D:/home/honda/mpg/scripts/createdb.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/createdb.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/createdb.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/createdb.r', echo=TRUE)
freq_list
param
curr_list
source('~/.active-rstudio-document', echo=TRUE)
is.empty(c())
is.empty(data.frame())
if( is.data.frame(obj) && nrow(obj)<1 ) return(TRUE)
is.empty <- function( obj ){
if( is.null(obj) ) return(TRUE)
if( length(obj)<1 ) return(TRUE)
if( is.data.frame(obj) && nrow(obj)<1 ) return(TRUE)
return(FALSE)
}
is.empty(c(NULL,NULL))
is.empty <- function( obj ){
if( length(obj)<1 ) return(TRUE)
if( is.data.frame(obj) && nrow(obj)<1 ) return(TRUE)
if( is.null(obj) ) return(TRUE)
return(FALSE)
}
is.empty(NULL)
is.empty(c(NULL,NULL))
length(NULL)
length(c(NULL,NULL))
dim(c(NULL,NULL))
nrow(c(NULL,NULL))
dim(NULL)
dim(matrix(c(NULL))
)
dim(matrix(c(NULL),1,1))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('D:/home/honda/mpg/scripts/createdb.r', echo=TRUE)
Q
source('D:/home/honda/mpg/scripts/createdb.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/createdb.r', echo=TRUE)
param
data
source('D:/home/honda/mpg/scripts/createdb.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/createdb.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/createdb.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/createdb.r', echo=TRUE)
source("tryDb.r")
source('D:/home/honda/mpg/scripts/createdb.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/createdb.r', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('D:/home/honda/mpg/scripts/createdb.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/createdb.r', echo=TRUE)
data
param
fql
Q
freq
curr
param
source('D:/home/honda/mpg/scripts/createdb.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/createdb.r', echo=TRUE)
fql_map
formula
param
fql_map["FF_WKCAP",]
fql_map$item
fql_map$fql
fql_map["FF_WKCAP"]
fql_map[,"FF_WKCAP"]
fql_map["FF_WKCAP",]
stopifnot( exists("FQL_MAP", envir=config) )
fql_map_filename <- get("FQL_MAP", envir=config)
stopifnot(file.exists(fql_map_filename))
fql_map <- read.csv(fql_map_filename)
rownames(fql_map) <- fql_map$fql
for( i in seq(1, nrow(fql_map) )){
r <- fql_map[i,]
fql <- r$fql
syntax <- r$syntax
description <- r$description
unit <- r$unit
report_freq <- r$report_freq
category <- r$category
note <- r$note
ret <- trySelect(conn, "category", c("category_id"), paste("category_name", enQuote(category), sep="="))
category_id <- ret$category_id
tryInsertOrReplace(conn, "fql", c("fql","syntax","description","unit","report_freq","note","category_id"),
data.frame(c(enQuote(fql)),
c(enQuote2(syntax)),
c(enQuote(description)),
c(unit),
c(enQuote(report_freq)),
c(enQuote(category)),
c(enQuote(note))
)
)
}
tryExtract <- function(param, d1, d2, freq, curr) {
browser()
formula <- fql_map[param, ]$fql
stopifnot(!is.empty(formula))
formula <- gsub("<ID>", param, formula)
formula <- gsub("<d1>",d1,formula)
formula <- gsub("<d2>",d2,formula)
formula <- gsub("<freq>",freq,formula)
formula <- gsub("<curr>",curr,formula)
logger.info(formula)
ret <- eval(parse(text=formula))
if(is.null(ret)) return(data.frame())
return(ret)
}
freq
curr
param
tryExtract(param,d1,d2,freq,curr)
c
Q
source('D:/home/honda/mpg/scripts/createdb.r', echo=TRUE)
param
d1
d2
freq
curr
formula
source('D:/home/honda/mpg/scripts/createdb.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/createdb.r', echo=TRUE)
FF.ExtractFormulaHistory('P_TOTAL_RETURNC', 'P_TOTAL_RETURNC(19800101,20131231,D,USD)', '19800101:20131231:D')
source('D:/home/honda/mpg/scripts/createdb.r', echo=TRUE)
