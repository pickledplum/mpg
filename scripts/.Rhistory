source('~/.active-rstudio-document', echo=TRUE)
source('D:/home/honda/mpg/fs/populate_db.r', echo=TRUE)
source('D:/home/honda/mpg/fs/populate_db.r', echo=TRUE)
source('D:/home/honda/mpg/fs/populate_db.r', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
(TRUE, "hell", "oh")
(TRUE? "hell": "oh")
TRUE? "hell": "oh"
source('D:/home/honda/mpg/fs/populate_db.r', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
local_val
length(local_val)
nchar()
nchar(local_val)
local_val == ""
nchar(usd_val)
usd_val
local_val == "NA"
local_val
local_val == NA
;
local_val
empty(local_val)
is.na(local_val)
source('D:/home/honda/mpg/fs/populate_db.r', echo=TRUE)
source('D:/home/honda/mpg/fs/drop_tables.r', echo=TRUE)
source('D:/home/honda/mpg/fs/drop_tables.r', echo=TRUE)
source('D:/home/honda/mpg/fs/drop_tables.r', echo=TRUE)
source('D:/home/honda/mpg/fs/drop_tables.r', echo=TRUE)
source('D:/home/honda/mpg/fs/populate_db.r', echo=TRUE)
source('D:/home/honda/mpg/fs/drop_tables.r', echo=TRUE)
source('D:/home/honda/mpg/fs/populate_db.r', echo=TRUE)
source('D:/home/honda/mpg/fs/drop_tables.r', echo=TRUE)
source('D:/home/honda/mpg/fs/populate_db.r', echo=TRUE)
source('D:/home/honda/mpg/fs/drop_tables.r', echo=TRUE)
source('D:/home/honda/mpg/fs/drop_tables.r', echo=TRUE)
source('D:/home/honda/mpg/fs/drop_tables.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
master_data
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
is.null(NULL)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
master_data
curr
master_data
source('~/.active-rstudio-document', echo=TRUE)
master_data
source('~/.active-rstudio-document', echo=TRUE)
master_tab
master_data
master_data
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
all_dates[1]
master_data[[2]]
tseries[[2]]
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
df1 = data.frame(CustomerId=c(1:6),Product=c(rep("Toaster",3),rep("Radio",3)))
df2 = data.frame(CustomerId=c(2,4,6),State=c(rep("Alabama",2),rep("Ohio",1)))
df1
df2
df1 = data.frame(CustomerId=c(1:6),Product=c(rep("Toaster",3),rep("Radio",3)))
df2 = data.frame(CustomerIdddd=c(2,4,6),State=c(rep("Alabama",2),rep("Ohio",1)))
df2
names(df1)
names(df2)
merge(df1,df2, by="CustomerId", all=TRUE)
merge(df1,df2, by.x="CustomerID", by.y="CustomerIdddd")
df1
df2
merge(df1,df2, by.x="CustomerID", by.y="CustomerIdddd", all=TRUE)
df1 = data.frame(CustomerId=c(1:6),Product=c(rep("Toaster",3),rep("Radio",3)))
df2 = data.frame(CustomerId=c(2,4,6),State=c(rep("Alabama",2),rep("Ohio",1)))
merge(df1,df2, by.x="CustomerID", by.y="CustomerId", all=TRUE)
merge(df1,df2, by=row.names)
merge(df1,df2, by="row.names")
merge(df1,df2, by="CostumerId")
merge(x=df1, y=df2, by="CostumerId")
df1 = data.frame(CustomerId=c(1:6),Product=c(rep("Toaster",3),rep("Radio",3)))
df2 = data.frame(CustomerId=c(2,4,6),State=c(rep("Alabama",2),rep("Ohio",1)))
merge(x = df1, y = df2, by = "CustomerId", all = TRUE)
df1
df2
merge(x = df1, y = df2, by = "CustomerId", all = TRUE)
merge(x = df1, y = df2, by.x = "CustomerId", by.y="CustomerID", all = TRUE)
merge(x = df1, y = df2, by.x = "CustomerId", by.y="CustomerId", all = TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
character(1)
str(1)
as.string(1)
as.character(1)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
tseries
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
365*30
x=range(1,10950)
x
x=seq(1,10950)
x
data.frame(c(x))
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
class(tseries)
tseries
colnames(tseries)
colnames(tseries) <- c("a", "b)")
colnames(tseries) <- c("a", "b")
c("a", "b")
colnames(tseries)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
data[3]
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
all(grep("^x","x182"))
all(grep("^x","X182"))
all(grep("^x","182"))
grep("^x","182")
count(grep("^x","182")==TRUE)
grep("^x","182")
grep("^x","x182")
grep("^x",c("x182","x222","X134","38")
)
grep("^x",c("x182","x222","X134","38"))
a<-grep("^x",c("x182","x222","X134","38"))
length(a)>0
a<-grep("^X",c("x182","x222","X134","38"))
length(a)>0
a<-grep("^I",c("x182","x222","X134","38"))
length(a)>0
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
setdiff(c("a","b"),c("a","c"))
setequal(c("a","b"),c("a","c"))
a=c(1,2,3)
b=c(2,3,5)
setdiff(a,b)
setdiff(b,a)
intersect(a,b)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
started = proc.time()
ended = proc.time()
ended-started
(ended-started)[3]
df
df1
df1 = data.frame(CustomerId=c(1:6),Product=c(rep("Toaster",3),rep("Radio",3)))
df1
ncol(df1)
source('D:/home/honda/mpg/scripts/download.r', echo=TRUE)
library("RUnit")
install.packages("RUnit")
remove.packages("RUnit")
setwd("D:/home/honda/mpg/scripts")
source('D:/home/honda/mpg/scripts/tryDb.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/tryDb.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/tryDb.r', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('D:/home/honda/mpg/scripts/assert.r', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('D:/home/honda/mpg/scripts/assert.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/assert.r', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
assert.equal(NULL,NA)
assert.not.equal(NULL, NA)
stopifnot(NULL==NA)
stopifnot(NULL!=NA)
NULL=NA
NULL==NA
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
eps
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
.Machine$double.eps
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('D:/home/honda/mpg/scripts/test.assert.r', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
assert.equal(1.123, 1.123)
assert.equal(NULL,NULL)
assert.equal("a", "a")
assert.not.equal(1, 1.1)
assert.not.equal(NULL, NA)
assert.equal.reltol(1, 1.1, .1)
}, error=function(msg){
print(msg)
assert.equal(NULL,NA)
source('~/.active-rstudio-document', echo=TRUE)
assert.equal(1.123, 1.123)
assert.equal(NULL,NULL)
assert.equal("a", "a")
assert.not.equal(1, 1.1)
assert.not.equal(NULL, NA)
assert.equal.reltol(1, 1.1, .1)
}, error=function(msg){
assert.equal(NULL,NA)
#assert.equal.reltol(1, 1.1, .09)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('D:/home/honda/mpg/scripts/test.assert.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/test.assert.r', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('D:/home/honda/mpg/scripts/test.tryDb.r', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
expected
ret
ret == expected
all(ret==expected)
source('~/.active-rstudio-document', echo=TRUE)
source('D:/home/honda/mpg/scripts/test.tryDb.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/test.tryDb.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/test.tryDb.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/test.tryDb.r', echo=TRUE)
table
table
source('D:/home/honda/mpg/scripts/test.tryDb.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/test.tryDb.r', echo=TRUE)
db <- "D:/home/honda/sqlite-db/mini.sqlite"
conn <<- dbConnect( SQLite(), db )
q_str <- "DROP TABLE IF EXISTS dummy"
trySendQuery(conn, q_str)
specs <- c("id INTEGER PRIMARY KEY ASC AUTOINCREMENT NOT NULL UNIQUE",
"val INTEGER")
q_str <- "CREATE TABLE IF NOT EXISTS dummy (id INTEGER PRIMARY KEY ASC AUTOINCREMENT NOT NULL UNIQUE, val INTEGER)"
tryCreateIfNotExistsTable(conn, "dummy", specs)
q_str <- "INSERT OR REPLACE INTO dummy (id, val) VALUES (1,30),(2,40),(3,50)"
tryInsert(conn, "dummy", c("id","val"), data.frame(c(1,2,3),c(30,40,50)))
library(RSQLite)
source("test.assert.r")
source("tryDb.r")
#
db <- "D:/home/honda/sqlite-db/mini.sqlite"
conn <<- dbConnect( SQLite(), db )
q_str <- "DROP TABLE IF EXISTS dummy"
trySendQuery(conn, q_str)
specs <- c("id INTEGER PRIMARY KEY ASC AUTOINCREMENT NOT NULL UNIQUE",
"val INTEGER")
q_str <- "CREATE TABLE IF NOT EXISTS dummy (id INTEGER PRIMARY KEY ASC AUTOINCREMENT NOT NULL UNIQUE, val INTEGER)"
tryCreateIfNotExistsTable(conn, "dummy", specs)
q_str <- "INSERT OR REPLACE INTO dummy (id, val) VALUES (1,30),(2,40),(3,50)"
tryInsert(conn, "dummy", c("id","val"), data.frame(c(1,2,3),c(30,40,50)))
source('D:/home/honda/mpg/scripts/test.tryDb.r', echo=TRUE)
setwd("D:/home/honda/mpg/scripts")
library(RSQLite)
source("test.assert.r")
source("tryDb.r")
#
db <- "D:/home/honda/sqlite-db/mini.sqlite"
conn <<- dbConnect( SQLite(), db )
q_str <- "DROP TABLE IF EXISTS dummy"
trySendQuery(conn, q_str)
specs <- c("id INTEGER PRIMARY KEY ASC AUTOINCREMENT NOT NULL UNIQUE",
"val INTEGER")
q_str <- "CREATE TABLE IF NOT EXISTS dummy (id INTEGER PRIMARY KEY ASC AUTOINCREMENT NOT NULL UNIQUE, val INTEGER)"
tryCreateIfNotExistsTable(conn, "dummy", specs)
q_str <- "INSERT OR REPLACE INTO dummy (id, val) VALUES (1,30),(2,40),(3,50)"
tryInsert(conn, "dummy", c("id","val"), data.frame(c(1,2,3),c(30,40,50)))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('D:/home/honda/mpg/scripts/tryDb.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/test.tryDb.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/test.tryDb.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/test.tryDb.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/test.tryDb.r', echo=TRUE)
library(RSQLite)
source("test.assert.r")
source("tryDb.r")
#
db <- "D:/home/honda/sqlite-db/mini.sqlite"
conn <<- dbConnect( SQLite(), db )
q_str <- "DROP TABLE IF EXISTS dummy"
trySendQuery(conn, q_str)
specs <- c("id INTEGER PRIMARY KEY ASC AUTOINCREMENT NOT NULL UNIQUE",
"val INTEGER")
q_str <- "CREATE TABLE IF NOT EXISTS dummy (id INTEGER PRIMARY KEY ASC AUTOINCREMENT NOT NULL UNIQUE, val INTEGER)"
tryCreateIfNotExistsTable(conn, "dummy", specs)
source('D:/home/honda/mpg/scripts/test.tryDb.r', echo=TRUE)
db <- "D:/home/honda/sqlite-db/mini.sqlite"
conn <<- dbConnect( SQLite(), db )
q_str <- "DROP TABLE IF EXISTS dummy"
trySendQuery(conn, q_str)
specs <- c("id INTEGER PRIMARY KEY ASC AUTOINCREMENT NOT NULL UNIQUE",
"val INTEGER")
q_str <- "CREATE TABLE IF NOT EXISTS dummy (id INTEGER PRIMARY KEY ASC AUTOINCREMENT NOT NULL UNIQUE, val INTEGER)"
tryCreateIfNotExistsTable(conn, "dummy", specs)
db <- "D:/home/honda/sqlite-db/mini.sqlite"
conn <<- dbConnect( SQLite(), db )
q_str <- "DROP TABLE IF EXISTS dummy"
trySendQuery(conn, q_str)
specs <- c("id INTEGER PRIMARY KEY ASC AUTOINCREMENT NOT NULL UNIQUE",
"val INTEGER")
q_str <- "CREATE TABLE IF NOT EXISTS dummy (id INTEGER PRIMARY KEY ASC AUTOINCREMENT NOT NULL UNIQUE, val INTEGER)"
tryCreateIfNotExistsTable(conn, "dummy", specs)
source('D:/home/honda/mpg/scripts/test.tryDb.r', echo=TRUE)
q_str <- "DROP TABLE IF EXISTS dummy"
trySendQuery(conn, q_str)
source('D:/home/honda/mpg/scripts/test.tryDb.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/test.tryDb.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/test.tryDb.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/test.tryDb.r', echo=TRUE)
tryInsertOrUpdate(conn, c("id","val"), data.frame(c(4), c(400)))
tryInsertOrUpdate(conn, "dummy", c("id","val"), data.frame(c(4), c(400)))
tryInsertOrUpdate(conn, "dummy", c("id","val"), data.frame(c(4), c(400)))
source('D:/home/honda/mpg/scripts/test.tryDb.r', echo=TRUE)
tryInsertOrUpdate(conn, "dummy", c("id","val"), data.frame(c(4), c(400)))
tryInsertOrUpdate(conn, "dummy", c("id","val"), data.frame(c(4), c(400)))
db <- "D:/home/honda/sqlite-db/mini.sqlite"
conn <<- dbConnect( SQLite(), db )
q_str <- "DROP TABLE IF EXISTS dummy"
trySendQuery(conn, q_str)
specs <- c("id INTEGER PRIMARY KEY ASC AUTOINCREMENT NOT NULL UNIQUE",
"val INTEGER")
q_str <- "CREATE TABLE IF NOT EXISTS dummy (id INTEGER PRIMARY KEY ASC AUTOINCREMENT NOT NULL UNIQUE, val INTEGER)"
tryCreateIfNotExistsTable(conn, "dummy", specs)
q_str <- "INSERT OR REPLACE INTO dummy (id, val) VALUES (1,30),(2,40),(3,50)"
tryInsert(conn, "dummy", c("id","val"), data.frame(c(1,2,3),c(30,40,50)))
expected <- data.frame(c(2,3), c(40,50))
ret <- trySelect(conn, c("id","val"), "dummy", "val>=40")
assert.equal(ret, expected)
tryInsertOrUpdate(conn, "dummy", c("id","val"), data.frame(c(4), c(400)))
source("test.assert.r")
source("tryDb.r")
#
db <- "D:/home/honda/sqlite-db/mini.sqlite"
conn <<- dbConnect( SQLite(), db )
q_str <- "DROP TABLE IF EXISTS dummy"
trySendQuery(conn, q_str)
specs <- c("id INTEGER PRIMARY KEY ASC AUTOINCREMENT NOT NULL UNIQUE",
"val INTEGER")
q_str <- "CREATE TABLE IF NOT EXISTS dummy (id INTEGER PRIMARY KEY ASC AUTOINCREMENT NOT NULL UNIQUE, val INTEGER)"
tryCreateIfNotExistsTable(conn, "dummy", specs)
q_str <- "INSERT OR REPLACE INTO dummy (id, val) VALUES (1,30),(2,40),(3,50)"
tryInsert(conn, "dummy", c("id","val"), data.frame(c(1,2,3),c(30,40,50)))
expected <- data.frame(c(2,3), c(40,50))
ret <- trySelect(conn, c("id","val"), "dummy", "val>=40")
assert.equal(ret, expected)
tryInsertOrUpdate(conn, "dummy", c("id","val"), data.frame(c(4), c(400)))
source('D:/home/honda/mpg/scripts/test.tryDb.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/test.tryDb.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/test.tryDb.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/test.tryDb.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/test.tryDb.r', echo=TRUE)
columns
values
source('D:/home/honda/mpg/scripts/test.tryDb.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/test.tryDb.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/test.tryDb.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/test.tryDb.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/test.tryDb.r', echo=TRUE)
setwd("D:/home/honda/mpg/scripts")
source('D:/home/honda/mpg/scripts/test.tryDb.r', echo=TRUE)
q_str
source('D:/home/honda/mpg/scripts/test.tryDb.r', echo=TRUE)
columns
cond
source('D:/home/honda/mpg/scripts/test.tryDb.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/test.tryDb.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/test.tryDb.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/test.tryDb.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/test.tryDb.r', echo=TRUE)
cols <- c(1,2,3")
)
quit
stop()
quit
exit()
)
"
a <- c(1,2,3)
b <- c(10,20,30)
paste(a,"=",b)
source('D:/home/honda/mpg/scripts/test.tryDb.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/test.tryDb.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/test.tryDb.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/test.tryDb.r', echo=TRUE)
simpleError("test error")
e <-simpleError("test error")
stop(e)
tryCatch(stop("ho!", error=function(e){print(e)}))
tryCatch(stop("ho!"), error=function(e){print(e)})
source('D:/home/honda/mpg/scripts/test.tryDb.r', echo=TRUE)
source('D:/home/honda/mpg/scripts/test.tryDb.r', echo=TRUE)
setwd("D:/home/honda/mpg/scripts")
source('D:/home/honda/mpg/scripts/test.tryDb.r', echo=TRUE)
values <- data.frame(c("a","b","c"), c(1,2,3))
values
colnames(values) <- c("c1","c2")
values
keyname <- "a"
columns <- c("id", "val")
values <- data.frame(c("a","b"), c(1,2))
values
colnames(values) <- c("id", "val")
values
which(columns==keyname)
columns
keyname
keyname="id"
which(columns==keyname)
values[-c(which(columns==keyname]),]
values[-c(which(columns==keyname])]
values[-c(which(columns==keyname)]
values[-c(which(columns==keyname)),]
values[,-c(which(columns==keyname))]
values
cbind(values, c(100,200))
values[,-c(which(columns==keyname))]
values
values <-cbind(values, c(100,200))
values
values[,-c(which(columns==keyname))]
